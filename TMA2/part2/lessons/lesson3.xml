<text>This unit will introduce you to XML & AJAX. Those technologies can help make your web applications more modular and externalize some of your data. </text>
<heading>3.1 XML</heading>
<text>XML or extensible markup language is a format that allows you to format data in a way that is easy for both a human and a machine to read. XML is great for storing data that is sent accross web applications or to make easily editable forms. For example, the quizes that you see at the end of each unit are stored as XML files. This makes it easy to add new tests or modify existing ones, since all you need to do is modify the XML file, and the Javascript code will build the quiz from the updated XML file.</text>
<text>Here is what the quizes look like </text>
<code>
##<quiz>
#T#<question>
#TT#<description>Question text here</description>
#TT#<options>
#TTT#<option>option 1</option>
#TTT#<option correct="true">option 2</option>
#TTT#<option>option 3</option>
#TTT#<option>option 4</option>
#TT#</options>
#T#</question>
##
#T#<question>
#TT#...
##
</quiz>
</code>
<text>Much like the HTML code you have learned so far, XML uses tags and attributes to format its data. </text>
<text>An XML file must have only one root (top level) tag. In this case, our root tag is #!quiz!#. In our options, we use the attribute #!correct="true"!# to define the correct answer, and our code looks for that when creating it. You can format your data however you like, as long as its consistent and logical. </text>
<text>You can create XML Schemas. These define rules and constraints for your XML data. For example, we can create a schema for the quiz that forces us to have at least one question in the quiz, and also confirms that the quiz has valid description, the options section, and at least one question that is correct. You can use a XML Validators, that tell you if a certain XML file is valid and complete against your schema.</text>
<heading>3.2 AJAX</heading>
<text>Ajax, or Asynchronous Javascript and XML is a method for asynchronously downloading data in your web applications. This allows you to download data and use it to modify your webpage without needing to refresh it. For example, this web application uses AJAX technology to load the different units. When you select one of the units in the left hand side, it calls a method which loads the content for the selected unit from a seperate HTML file, for example unit3.html and displays its content. </text>
<code>
##var request = new XMLHttpRequest()
##request.onreadystatechange = function () {
#T#if (request.readyState == 4 && request.status == 200) {
#TT#alert(request.responseText)
#T#}
##}
##request.open("GET", "yourfile.txt", true) 
##request.send() 
</code>
<text> This code first creates a new #!XMLHttpRequest!# object, which is what allows us to download the files. Then we add a state changed event listener to the request object. This allows us to define what happens with the data when it is downloaded. In this example, we just output the responseText (which is the downloaded data) as an alert. The open function allows us to specify that we want to #!"GET"!# or download the file. Lastly, we send the request we just created. </text>