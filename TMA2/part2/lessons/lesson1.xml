<text>This unit will teach you the most basic buiding blocks of any website or web application. That is HTML.</text>
<heading>1.1 Basics of HTML</heading>
<text>HTML is the basic building block of most websites. HTML stands for Hypertext Markup Language, and is what defines the content and structure of a webpage.</text>
<text>To get started, open your text editor and create a new file. Call it index.html.</text>
<text>Paste the following code into your textfile, and save it.</text>
<code>
##<!DOCTYPE html>
##<html>
##<head>
#T#<title>Website title</title>
##</head>
##<body>
#T#<h1>A heading</h1>
#T#<p>Some text here</p>
##</body>
##</html>
</code>
<text>The first line #!<!DOCTYPE html>!# specifies that this is an HTML document.</text>
<text>HTML syntax is made up of tags, that are enclosed in #!<>!#</text>
<text>Most tags need to be closed by having a #!/!# in the closing tag. As you can see from the example, the #!<body>!# tag is closed by #!</body>!#. That is the same for both #!h1!# and #!p!#.</text>
<text>Enclosed in the #!html!# tags is all the HTML content for this page. The #!head!# tag contains metadata about the website such as the website #!title!# which you see in your browser tab. The #!body!# specifies the content that is visible on the webpage.</text>
<text>#!h1!# is a header, and #!p!# specifies a paragraph. There are many elements in HTML. The next section covers some of them.</text>
<text>This is a very basic HTML file. Open the file in a browser to see its output.</text>
<heading>1.2 Basics of HTML</heading>
<text>One of the most important structures in HTML are headers. As you saw in the previous example, h1 created a big header. There are 6 levels of headers in HTML. They are shown below.</text>
<code>
##<!DOCTYPE html>
##<html>
##<body>
#T#<h1>Heading 1</h1>
#T#<h2>Heading 2</h2>
#T#<h3>Heading 3</h3>
#T#<h4>Heading 4</h4>
#T#<h5>Heading 5</h5>
#T#<h6>Heading 6</h6>
##</body>
##</html> 
</code>
<text>Another important HTML element is #!div!#, which lets you define different sections. Generally, different portions of the webpage are split into different divs. The following example shows two different divs that correspond to different sections. We also show one more element, #!hr!#, which defines a horizontal line / break.</text>
<code>
##<!DOCTYPE html>
##<html>
##<body>
#T#<div>
#TT#<h1>Section 1</h1>
#TT#<p>This is the first section</p>
#T#</div>
#T#<hr/>
#T#<div>
#TT#<h1>Section 2</h1>
#TT#<p>This is the second section</p>
#T#</div>
##</body>
##</html> 
</code>
<text>HTML allows you to have lists. There are two types: ordered lists #!ol!# and unordered lists #!ul!#. Inside the list, you specify list items using the tag #!li!#.</text>
<code>
##<!DOCTYPE html>
##<html>
##<body>
#T#<ol>
#TT#<li>First item</li>
#TT#<li>Second item</li>
#TT#<li>Third item</li>
#T#</ol>
#T#<ul>
#TT#<li>First item</li>
#TT#<li>Second item</li>
#TT#<li>Third item</li>
#T#</ul> 
##</body>
##</html> 
</code>
<heading>1.3 Input Types</heading>
<text>HTML also allows having #!input!#. To have input, it is specified inside a #!form!#. You can create different forms for different input groups and have as many inputs in a form as you like.</text>
<text>To specify the type of input, you must specify the property #!type!#. These are some examples of types available in HTML. </text>
<list>
    <item>text: Allows a regular text input</item>
    <item>number: Only allows numbers</item>
    <item>checkbox: Adds a checkbox that can be checked or unchecked</item>
    <item>radio: Adds a radio button which only allows one selection at a time</item>
    <item>date: Allows specifying a date input</item>
    <item>reset: Button that clears the form</item>
</list>
<text>You can also add descriptions to your inputs by wrapping the input in a #!label!# tag.</text>
<text>Here is an example that uses all of those input types:</text>
<code>
##<!DOCTYPE html>
##<html>
##<body>
#T#<form>
#TT#<label>Text<input type="text"/></label>
#TT#<label>Number<input type="number"/></label>
#TT#<label>Checkbox<input type="checkbox"/></label>
#TT#<label>Radio 1<input name="example" type="radio"/></label>
#TT#<label>Radio 2<input name="example" type="radio"/></label>
#TT#<label>Date<input type="date"/></label>
#TT#<label>Reset<input type="reset"/></label>
#T#</form>
##</body>
##</html> 
</code>
<text>The radio button input uses the property name to link the two radio buttons together. As you can see, only one of them can be selected at a time, as only one value should be present.</text>

UPDATE Lessons SET content = '<text>This unit will introduce you to XML & AJAX. Those technologies can help make your web applications more modular and externalize some of your data. </text>
<heading>3.1 XML</heading>
<text>XML or extensible markup language is a format that allows you to format data in a way that is easy for both a human and a machine to read. XML is great for storing data that is sent accross web applications or to make easily editable forms. For example, the quizes that you see at the end of each unit are stored as XML files. This makes it easy to add new tests or modify existing ones, since all you need to do is modify the XML file, and the Javascript code will build the quiz from the updated XML file.</text>
<text>Here is what the quizes look like </text>
<code>
##<quiz>
#T#<question>
#TT#<description>Question text here</description>
#TT#<options>
#TTT#<option>option 1</option>
#TTT#<option correct="true">option 2</option>
#TTT#<option>option 3</option>
#TTT#<option>option 4</option>
#TT#</options>
#T#</question>
##
#T#<question>
#TT#...
##
</quiz>
</code>
<text>Much like the HTML code you have learned so far, XML uses tags and attributes to format its data. </text>
<text>An XML file must have only one root (top level) tag. In this case, our root tag is #!quiz!#. In our options, we use the attribute #!correct="true"!# to define the correct answer, and our code looks for that when creating it. You can format your data however you like, as long as its consistent and logical. </text>
<text>You can create XML Schemas. These define rules and constraints for your XML data. For example, we can create a schema for the quiz that forces us to have at least one question in the quiz, and also confirms that the quiz has valid description, the options section, and at least one question that is correct. You can use a XML Validators, that tell you if a certain XML file is valid and complete against your schema.</text>
<heading>3.2 AJAX</heading>
<text>Ajax, or Asynchronous Javascript and XML is a method for asynchronously downloading data in your web applications. This allows you to download data and use it to modify your webpage without needing to refresh it. For example, this web application uses AJAX technology to load the different units. When you select one of the units in the left hand side, it calls a method which loads the content for the selected unit from a seperate HTML file, for example unit3.html and displays its content. </text>
<code>
##var request = new XMLHttpRequest()
##request.onreadystatechange = function () {
#T#if (request.readyState == 4 && request.status == 200) {
#TT#alert(request.responseText)
#T#}
##}
##request.open("GET", "yourfile.txt", true) 
##request.send() 
</code>
<text> This code first creates a new #!XMLHttpRequest!# object, which is what allows us to download the files. Then we add a state changed event listener to the request object. This allows us to define what happens with the data when it is downloaded. In this example, we just output the responseText (which is the downloaded data) as an alert. The open function allows us to specify that we want to #!"GET"!# or download the file. Lastly, we send the request we just created. </text>' where id = 3;
