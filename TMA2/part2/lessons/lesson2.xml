<text>This unit will introduce you to scripting in Javascript. Javascript runs client side in the browser. By using javascript we can add extra functionality and logic to a website or web applicaiton. </text>
<heading>2.1 Introduction</heading>
<text>To add javascript code to our website, we must add it in the header section using the #!script!# tag.</text>
<code>
##<!DOCTYPE html>
##<html>
#T#<head>
#TT#<title>Website title</title>
#TT#<script type="text/javascript">
#TTT#document.writeln("<h1>Javascript works!</h1>")
#TT#</script>
#T#</head>
#T#<body>
#T#</body>
##</html> 
</code>
<text>The #!type!# attribute tells the browser that our script is javascript text.</text>
<text>The #!document!# object represents the currently displayed html page in the browser. The #!writeln!# method on the document object writes a new line. Inside the method we pass a string argument which is the html code to add. </text>
<text>Since all our script does is add a header to our HTML document, this is the same as having that header in the body. That isnt a very useful script, so lets try to add some more functionality to it.</text>
<code>
##<!DOCTYPE html>
##<html>
#T#<head>
#TT#<title>Website title</title>
#TT#<script type="text/javascript">
#TTT#today = new Date()
#TTT#document.writeln("<h1>The date is ")
#TTT#document.write(today + "</h1>")#TT#</script>
#TT#</script>
#T#</head>
#T#<body>
#T#</body>
##</html> 
</code>
<text>This script will display the current date. </text>
<text>Javascript has a #!Date!# object. An object is a type that has a state and properties (fields). To create a new object in Javascript, you use the keyword #!new!#. For example, to create a date we use #!new Date()!#, which creates a date object with todays date.</text>
<text>The #!write!# method on document will write content without adding a new line, where as #!writeln!# will add a new line after it adds the content. </text>
<text>You can test this out by yourself. Copy the contents in the example into a .html file, and run it in your web browser.</text>
<text>While you can put Javascript code in your HTML file using the tag, this is not recommended. The better way is to have your javascript code in a seperate file, and reference it in your HTML document. </text>
<code>
##<!DOCTYPE html>
##<html>
#T#<head>
#TT#<title>Website title</title>
#TT#<script type="text/javascript" src="script.js" >
#TT#</script>
#T#</head>
#T#<body>
#T#</body>
##</html> 
</code>
<text>The #!src!# attribute stands for "source" and will point towards an external file that contains your javascript code. Generally javascript files have the extention .js</text>
<heading>2.2 Functions</heading>
<text>Javascript allows you to define functions. Functions are blocks of code that can have a return value, and that you can run when you like. The following example will demonstrate a basic usage of a function. </text>
<code>
##<!DOCTYPE html>
##<html>
#T#<head>
#TT#<title>Website title</title>
#TT#<script type="text/javascript">
#TTT#function test() {}
#TTTT#alert("Inside the function!")
#TTT#document.write(today + "</h1>")#TT#</script>
#TT#</script>
#T#</head>
#T#<body>
#TT#<button onclick="test()">Click Me!</button>
#T#</body>
##</html> 
</code>
<text>The #!onclick!# attribute for a button allows you to specify Javascript code to run when the button is clicked. Here I set it to run the function test. The #!alert!# function in Javascript will create an alert in your browser.</text>
<heading>2.3 Events </heading>
<text>Sometimes we want things to happen automatically without user input. We can achieve this using events. Events are responses to things happening in your HTML page. For example, Javascript has a #!load!# event. The load event is fired whenever the HTML object is fully loaded. We can use this to automatically run certain functions or scripts when the page loads. </text>
<code>
##function test() {
#T#alert("This will run automatically!")
##}
##
##window.addEventListener("load", test, false) 
</code>
<text>In that example, we add an eventListener to the #!window!# object. The window object contains everything in the current web page. An eventListener will "listen" to check if the event we specified has happened. In this case, we specify the load event. We also specify to run the test function when the event fires. The last argument will always be false and is beyond the scope of this course. </text>
<text>There are many events available in Javascript. For example, there is the mouseover event which fires whenever the cursor enters a certain element. There is also onkeypress event which happens when a user clicks a key on their keyboard. </text>
